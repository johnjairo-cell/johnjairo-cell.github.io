(()=>{"use strict";var e={919:e=>{function o(e){return"number"==typeof e||!!/^0x[0-9a-f]+$/i.test(e)||/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(e)}function t(e,o){return"constructor"===o&&"function"==typeof e[o]||"__proto__"===o}e.exports=function(e,n){n||(n={});var r={bools:{},strings:{},unknownFn:null};"function"==typeof n.unknown&&(r.unknownFn=n.unknown),"boolean"==typeof n.boolean&&n.boolean?r.allBools=!0:[].concat(n.boolean).filter(Boolean).forEach((function(e){r.bools[e]=!0}));var s={};function i(e){return s[e].some((function(e){return r.bools[e]}))}Object.keys(n.alias||{}).forEach((function(e){s[e]=[].concat(n.alias[e]),s[e].forEach((function(o){s[o]=[e].concat(s[e].filter((function(e){return o!==e})))}))})),[].concat(n.string).filter(Boolean).forEach((function(e){r.strings[e]=!0,s[e]&&[].concat(s[e]).forEach((function(e){r.strings[e]=!0}))}));var c=n.default||{},a={_:[]};function l(e,o,n){for(var s=e,i=0;i<o.length-1;i++){var c=o[i];if(t(s,c))return;void 0===s[c]&&(s[c]={}),s[c]!==Object.prototype&&s[c]!==Number.prototype&&s[c]!==String.prototype||(s[c]={}),s[c]===Array.prototype&&(s[c]=[]),s=s[c]}var a=o[o.length-1];t(s,a)||(s!==Object.prototype&&s!==Number.prototype&&s!==String.prototype||(s={}),s===Array.prototype&&(s=[]),void 0===s[a]||r.bools[a]||"boolean"==typeof s[a]?s[a]=n:Array.isArray(s[a])?s[a].push(n):s[a]=[s[a],n])}function u(e,t,n){if(!n||!r.unknownFn||function(e,o){return r.allBools&&/^--[^=]+$/.test(o)||r.strings[e]||r.bools[e]||s[e]}(e,n)||!1!==r.unknownFn(n)){var i=!r.strings[e]&&o(t)?Number(t):t;l(a,e.split("."),i),(s[e]||[]).forEach((function(e){l(a,e.split("."),i)}))}}Object.keys(r.bools).forEach((function(e){u(e,void 0!==c[e]&&c[e])}));var f=[];-1!==e.indexOf("--")&&(f=e.slice(e.indexOf("--")+1),e=e.slice(0,e.indexOf("--")));for(var p=0;p<e.length;p++){var h,b,d=e[p];if(/^--.+=/.test(d)){var y=d.match(/^--([^=]+)=([\s\S]*)$/);h=y[1];var v=y[2];r.bools[h]&&(v="false"!==v),u(h,v,d)}else if(/^--no-.+/.test(d))u(h=d.match(/^--no-(.+)/)[1],!1,d);else if(/^--.+/.test(d))h=d.match(/^--(.+)/)[1],void 0===(b=e[p+1])||/^(-|--)[^-]/.test(b)||r.bools[h]||r.allBools||s[h]&&i(h)?/^(true|false)$/.test(b)?(u(h,"true"===b,d),p+=1):u(h,!r.strings[h]||"",d):(u(h,b,d),p+=1);else if(/^-[^-]+/.test(d)){for(var g=d.slice(1,-1).split(""),_=!1,k=0;k<g.length;k++)if("-"!==(b=d.slice(k+2))){if(/[A-Za-z]/.test(g[k])&&"="===b[0]){u(g[k],b.slice(1),d),_=!0;break}if(/[A-Za-z]/.test(g[k])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(b)){u(g[k],b,d),_=!0;break}if(g[k+1]&&g[k+1].match(/\W/)){u(g[k],d.slice(k+2),d),_=!0;break}u(g[k],!r.strings[g[k]]||"",d)}else u(g[k],b,d);h=d.slice(-1)[0],_||"-"===h||(!e[p+1]||/^(-|--)[^-]/.test(e[p+1])||r.bools[h]||s[h]&&i(h)?e[p+1]&&/^(true|false)$/.test(e[p+1])?(u(h,"true"===e[p+1],d),p+=1):u(h,!r.strings[h]||"",d):(u(h,e[p+1],d),p+=1))}else if(r.unknownFn&&!1===r.unknownFn(d)||a._.push(r.strings._||!o(d)?d:Number(d)),n.stopEarly){a._.push.apply(a._,e.slice(p+1));break}}return Object.keys(c).forEach((function(e){var o,t,n;o=a,t=e.split("."),n=o,t.slice(0,-1).forEach((function(e){n=n[e]||{}})),t[t.length-1]in n||(l(a,e.split("."),c[e]),(s[e]||[]).forEach((function(o){l(a,o.split("."),c[e])})))})),n["--"]?a["--"]=f.slice():f.forEach((function(e){a._.push(e)})),a}}},o={};function t(n){var r=o[n];if(void 0!==r)return r.exports;var s=o[n]={exports:{}};return e[n](s,s.exports,t),s.exports}t.n=e=>{var o=e&&e.__esModule?()=>e.default:()=>e;return t.d(o,{a:o}),o},t.d=(e,o)=>{for(var n in o)t.o(o,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},t.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o);const n=require("path");var r=t(919),s=t.n(r);const i=require("child_process"),c=(...e)=>{{const o="GitHubDesktop.exe";(0,i.spawn)((0,n.join)(__dirname,`../../${o}`),e,{detached:!0,stdio:"ignore"}).on("error",(function(o,t){o&&(console.error(`Error running command ${e}`),console.error(t??`${o}`),process.exit("object"==typeof o&&"code"in o&&"number"==typeof o.code?o.code:1))})).on("exit",(e=>process.exitCode=e??process.exitCode)).unref()}},a=s()(process.argv.slice(2),{alias:{help:"h",branch:"b"},boolean:["help"]}),l=(e=1)=>{process.stderr.write("GitHub Desktop CLI usage: \n  github                            Open the current directory\n  github open [path]                Open the provided path\n  github clone [-b branch] <url>    Clone the repository by url or name/owner\n                                    (ex torvalds/linux), optionally checking out\n                                    the branch\n"),process.exit(e)};if(delete process.env.ELECTRON_RUN_AS_NODE,a.help||"help"===a._.at(0))l(0);else if("clone"===a._.at(0)){const e=a._.at(1),o=e&&/^[^\/]+\/[^\/]+$/.test(e)?`https://github.com/${e}`:e;o?"string"==typeof a.branch?c(`--cli-clone=${o}`,`--cli-branch=${a.branch}`):c(`--cli-clone=${o}`):l(1)}else{const[e,o]=a._,t="open"===e?o:e;c(`--cli-open=${(0,n.resolve)(t??".")}`)}module.exports.cli={}})();
//# sourceMappingURL=cli.js.map